/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.board;

import java.awt.LayoutManager;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import view.Color;
import view.sound.SoundEffectsPlayer;
/**
 *
 * @author Others
 */
public class ReversiBoard extends javax.swing.JPanel implements IBoard{

    private IReversiPiecesFactory reversiPiecesFactory = new ReversiPiecesFactory();
    private int gridTopLeftXCordinate = 39;
    private int gridTopLeftYCordinate = 39;
    private double pixelsCountBetweenAdjecentGrids = 71.5;
    private List<BoardPointClickedListener> boardPointClickedListeners = new ArrayList<>();
    private List<MouseHoveredOnPointListener> mouseHoveredOnPointListeners = new ArrayList<>();
    private Map<Point,JLabel> gridPoints = new HashMap<>();
    private Map<Point, JLabel> pointHighlights = new HashMap<>();
    private Point lastPointMouseHoveredOn;
    /**
     * Creates new form newBoard
     */
    public ReversiBoard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JLayeredPane();
        boardImage = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        mainPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mainPanelMouseMoved(evt);
            }
        });
        mainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 649, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 649, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(mainPanel, gridBagConstraints);

        boardImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/images/reversi_board.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(boardImage, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void mainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseClicked
        // TODO add your handling code here:
        if (coordinateIsInGridBounds(evt.getX(), evt.getY())) {
            Point boardPointClicked = convertGridPixelCoordinateToBoardPoint(evt.getX(), evt.getY());
            boardPointClickedListeners.stream().forEach(listener->listener.boardPointClicked(boardPointClicked));
        }
    }//GEN-LAST:event_mainPanelMouseClicked

    private void mainPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseMoved
        // TODO add your handling code here:
        if (coordinateIsInGridBounds(evt.getX(), evt.getY())) {
            Point pointMouseIsHoveringOn = convertGridPixelCoordinateToBoardPoint(evt.getX(), evt.getY());
            if (!equalsLastPointMouseHoveredOn(pointMouseIsHoveringOn)) {
                mouseHoveredOnPointListeners.stream().forEach(listener -> listener.mouseHovered(pointMouseIsHoveringOn));
                lastPointMouseHoveredOn = pointMouseIsHoveringOn;
            }
        }
    }//GEN-LAST:event_mainPanelMouseMoved
 
    private boolean equalsLastPointMouseHoveredOn(Point newPoint) {
        return (lastPointMouseHoveredOn != null && lastPointMouseHoveredOn.equals(newPoint));
    }
    
    private boolean coordinateIsInGridBounds(int x, int y) {
        int gridBottomRightXCordinate = gridTopLeftXCordinate + new Double(8*pixelsCountBetweenAdjecentGrids).intValue();
        int gridBottomRightYCordinate = gridTopLeftYCordinate + new Double(8*pixelsCountBetweenAdjecentGrids).intValue();
        return x>=gridTopLeftXCordinate && x<=gridBottomRightXCordinate && 
               y>=gridTopLeftYCordinate && y<=gridBottomRightYCordinate;
    }
    
    private int getFirstXPixelCoordinateOfColomnInGrid(int colomn) {
        return gridTopLeftXCordinate + new Double((colomn-1)*pixelsCountBetweenAdjecentGrids).intValue();
    }
    
    private int getFirstYPixelCoordinateOfRowInGrid(int row) {
        return gridTopLeftYCordinate + new Double((row-1)*pixelsCountBetweenAdjecentGrids).intValue();
    }    
    
    private Point convertGridPixelCoordinateToBoardPoint(int x, int y) {
        int colomn = new Double((double)(x-gridTopLeftXCordinate)/pixelsCountBetweenAdjecentGrids).intValue()+1;
        int row = new Double((double)(y-gridTopLeftYCordinate)/pixelsCountBetweenAdjecentGrids).intValue()+1;
        return new Point(row,colomn);
    }
    
    // public ==========================================================
    public ReversiBoard(LayoutManager layout) {
        super(layout);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel boardImage;
    private javax.swing.JLayeredPane mainPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setPointColor(view.Color color, Point point) {
        setPointLabel(reversiPiecesFactory.createPiece(color), point);
    }

    @Override
    public void clearPoint(Point point) {
        if (gridPoints.containsKey(point)) {
            mainPanel.remove(gridPoints.get(point));
            gridPoints.remove(point);
            mainPanel.repaint();
            mainPanel.revalidate();
        }
    }
    
    @Override
    public void showFlipAnimation(view.Color beforeFlip, Point point) {
        List<JLabel> animationFrames = reversiPiecesFactory.createFlipAnimationFrames(beforeFlip);
        int animationLengthMilisec = 250;
        FrameAnimation animation = new FrameAnimation(animationFrames, animationLengthMilisec) {
            @Override
            protected void drawFrame(JLabel currentFrame) {
                setPointLabel(currentFrame, point);
            }
            
            @Override
            protected void onAnimationEnd() {
                setPointColor(beforeFlip.opposite(), point);
            }
        };
        animation.start();      
    }
    
    private void setPointLabel(JLabel label, Point point) {
        clearPoint(point);
        int pieceCenterOffset = new Double((pixelsCountBetweenAdjecentGrids-label.getIcon().getIconWidth())/2).intValue();
        label.setBounds(getFirstXPixelCoordinateOfColomnInGrid(point.getColomn())+pieceCenterOffset,
                getFirstYPixelCoordinateOfRowInGrid(point.getRow())+pieceCenterOffset, label.getIcon().getIconWidth(), label.getIcon().getIconHeight());
        gridPoints.put(point, label);
        mainPanel.add(label);   
    }

    @Override
    public void clear() {
        mainPanel.removeAll();
        gridPoints.clear();
        mainPanel.repaint();
        mainPanel.revalidate();
    }

    @Override
    public void addBoardPointClickedListener(BoardPointClickedListener listener) {
        boardPointClickedListeners.add(listener);
    }

    @Override
    public void removeBoardPointClickedListener(BoardPointClickedListener listener) {
        boardPointClickedListeners.remove(listener);
    }

    @Override
    public void setPointTransparentColor(Color color, Point point) {
        setPointLabel(reversiPiecesFactory.createTransparentPiece(color), point);
    }

    @Override
    public void highlightPoint(Point point, java.awt.Color color) {
        JLabel label = reversiPiecesFactory.createPointHighlight(color);
        int pieceCenterOffset = new Double((pixelsCountBetweenAdjecentGrids-label.getIcon().getIconWidth())/2).intValue();
        label.setBounds(getFirstXPixelCoordinateOfColomnInGrid(point.getColomn())+pieceCenterOffset,
                getFirstYPixelCoordinateOfRowInGrid(point.getRow())+pieceCenterOffset, label.getIcon().getIconWidth(), label.getIcon().getIconHeight());
        pointHighlights.put(point, label);
        mainPanel.add(label); 
    }

    @Override
    public void removeHighlights() {
        for (Point point : pointHighlights.keySet()) {
            mainPanel.remove(pointHighlights.get(point));
            mainPanel.repaint();
            mainPanel.revalidate();
        }
        pointHighlights.clear();
    }

    @Override
    public void addMouseHoveredOnPointListener(MouseHoveredOnPointListener listener) {
        mouseHoveredOnPointListeners.add(listener);
    }
}
